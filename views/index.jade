// import header
extends layout

// body start
block content
    body.skin-5
    .container
        // Top Navigation
        .content
            header.codrops-header
                h1
                    | Solution Remote Management
            #grid.grid.clearfix
                - for ( var i = 0; i < clients.length; ++i ) {
                    if clients[i].state
                        .grid__item
                            | #{clients[i].name}
                - }
        // /content
    // /container
    #drop-area.drop-area
        div
            .drop-area__item
                .dummy
                .client_name
                    | <br />
                .client_port
                    | 6006
            .drop-area__item
                .dummy
                .client_name
                    | <br />
                .client_port
                    | 6007
            .drop-area__item
                .dummy
                .client_name
                    | <br />
                .client_port
                    | 6008
            .drop-area__item
                .dummy
                .client_name
                    | <br />
                .client_port
                    | 6009
    .drop-overlay
    .modal.fade.bs-example-modal-sm(tabindex='-1', role='dialog', aria-labelledby='mySmallModalLabel')
        .modal-dialog.modal-sm(style='margin-top:350px;width:300px;')
            .modal-content
                .modal-header
                    button.close(type='button', data-dismiss='modal', aria-label='Close')
                        span(aria-hidden='true') &times;
                    h4.modal-title 내부 IP:포트를 입력해주세요!
                .modal-body(style='width:100%')
                    center
                        input#input_prip(type='text', style='width:100px')
                        |  :
                        input#input_port(type='text', style='width:50px')
                .modal-footer
                    button.btn.btn-default#modal_cancel(type='button', data-dismiss='modal') 취소
                    button.btn.btn-primary#modal_ok(type='button') 연결!
    script(src='javascripts/draggabilly.pkgd.min.js')
    script(src='javascripts/dragdrop.js')
    script.
        var drag_item = "";
        var link_data = [];
        var body = document.body,
                dropArea = document.getElementById( 'drop-area' ),
                droppableArr = [], dropAreaTimeout;



        socket.on('link_request_result', function (data) {
            if (data != 'ok') {
                alert("연결 정책 생성에 실패하였습니다.");
                link_data.linkok(link_data.instance, false);
            } else {
                link_data.linkok(link_data.instance, true);
                $('.client_name',link_data.el).html(link_data.client_name + '('+ link_data.client_port + ')');
                console.log(link_data.client_name);
            }
            link_data = [];
        });

        $('.modal').on('show.bs.modal', function (e) {
            $('#input_prip').val('127.0.0.1');
            $('#input_port').val('');
        });

        $('.modal').on('shown.bs.modal', function (e) {
            $('#input_port').focus();
        });


        $('#input_port').keydown(function(e){
            if ( e.which == 13 ) {
                $('#modal_ok').click();
            }
        });

        $('body').keydown(function(e){
            switch(e.which){
                case 27:
                    var afterDropFn = function() {
                        // hide dropArea
                        classie.remove( dropArea, 'show' );
                        // remove class 'drag-active' from body
                        classie.remove( body, 'drag-active' );
                    };
                    clearTimeout( dropAreaTimeout );
                    dropAreaTimeout = setTimeout( afterDropFn, 100 );
                    break;
                case 83:
                    classie.add( body, 'drag-active' );
                    clearTimeout( dropAreaTimeout );
                    classie.add( dropArea, 'show' );
                    break;
            }
        });

        $('#modal_ok').click(function () {
            link_data.client_prip = $('#input_prip').val();
            link_data.client_port = $('#input_port').val();
            if(link_data.client_port.length == 0){
                return;
            }
            var packet = {
                user_port:link_data.user_port,
                client_name:link_data.client_name,
                client_pr_ip:link_data.client_prip,
                client_port:link_data.client_port
            }
            packet = JSON.stringify(packet);

            socket.emit("link_request",packet);
            $('.modal').modal('hide');
        });

        $('.close').click(function () {
            $('#modal_cancel').click();
        });

        $('#modal_cancel').click(function () {
            var afterDropFn = function() {
                // hide dropArea
                classie.remove( dropArea, 'show' );
                // remove class 'drag-active' from body
                classie.remove( body, 'drag-active' );
            };
            clearTimeout( dropAreaTimeout );
            dropAreaTimeout = setTimeout( afterDropFn, 400 );
        });

        (function() {
            // initialize droppables
            [].slice.call( document.querySelectorAll( '#drop-area .drop-area__item' )).forEach( function( el ) {
                droppableArr.push( new Droppable( el, {
                    onDrop : function( instance, draggableEl ) {
                        // show checkmark inside the droppabe element
                        link_data.client_name = $(drag_item).text();
                        link_data.state = -1;
                        link_data.instance = instance;
                        link_data.el = el;
                        link_data.user_port = parseInt($('.client_port',el).html());
                        link_data.linkok = function(instance, flag){
                            if(flag)
                                classie.add( instance.el, 'drop-feedback' );
                            clearTimeout( instance.checkmarkTimeout );

                            instance.checkmarkTimeout = setTimeout( function() {
                                classie.remove( instance.el, 'drop-feedback' );

                                var afterDropFn = function() {
                                    // hide dropArea
                                    classie.remove( dropArea, 'show' );
                                    // remove class 'drag-active' from body
                                    classie.remove( body, 'drag-active' );
                                };
                                clearTimeout( dropAreaTimeout );
                                dropAreaTimeout = setTimeout( afterDropFn, 400 );
                            }, 800 );
                        }
                        $('.modal').modal('show');
                    }
                } ) );
            } );
            // initialize draggable(s)
            [].slice.call(document.querySelectorAll( '#grid .grid__item' )).forEach( function( el ) {
                new Draggable( el, droppableArr, {
                    draggabilly : { containment: document.body },
                    onStart : function() {
                        // add class 'drag-active' to body
                        classie.add( body, 'drag-active' );
                        // clear timeout: dropAreaTimeout (toggle drop area)
                        clearTimeout( dropAreaTimeout );
                        // show dropArea
                        classie.add( dropArea, 'show' );
                        drag_item = el;
                    },
                    onEnd : function( wasDropped ) {
                        var afterDropFn = function() {
                            // hide dropArea
                            classie.remove( dropArea, 'show' );
                            // remove class 'drag-active' from body
                            classie.remove( body, 'drag-active' );
                        };
                        if( !wasDropped ) {
                            afterDropFn();
                        }
                        else {
                            // after some time hide drop area and remove class 'drag-active' from body
                            //clearTimeout( dropAreaTimeout );
                            //dropAreaTimeout = setTimeout( afterDropFn, 400 );
                        }
                    }
                } );
            } );
        })();
// body end